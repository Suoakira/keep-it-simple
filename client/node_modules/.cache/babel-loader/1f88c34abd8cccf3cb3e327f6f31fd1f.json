{"ast":null,"code":"Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports['default'] = or;\n\nvar _propTypes = require('prop-types');\n\nvar _wrapValidator = require('./helpers/wrapValidator');\n\nvar _wrapValidator2 = _interopRequireDefault(_wrapValidator);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    'default': obj\n  };\n}\n\nfunction _toConsumableArray(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  } else {\n    return Array.from(arr);\n  }\n}\n\nfunction oneOfTypeValidator(validators) {\n  var validator = function () {\n    function oneOfType(props, propName, componentName) {\n      for (var _len = arguments.length, rest = Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {\n        rest[_key - 3] = arguments[_key];\n      }\n\n      var propValue = props[propName];\n\n      if (typeof propValue === 'undefined') {\n        return null;\n      }\n\n      var errors = validators.map(function (v) {\n        return v.apply(undefined, [props, propName, componentName].concat(rest));\n      }).filter(Boolean);\n\n      if (errors.length < validators.length) {\n        return null;\n      }\n\n      return new TypeError(String(componentName) + ': invalid value supplied to ' + String(propName) + '.');\n    }\n\n    return oneOfType;\n  }();\n\n  validator.isRequired = function () {\n    function oneOfTypeRequired(props, propName, componentName) {\n      for (var _len2 = arguments.length, rest = Array(_len2 > 3 ? _len2 - 3 : 0), _key2 = 3; _key2 < _len2; _key2++) {\n        rest[_key2 - 3] = arguments[_key2];\n      }\n\n      var propValue = props[propName];\n\n      if (typeof propValue === 'undefined') {\n        return new TypeError(String(componentName) + ': missing value for required ' + String(propName) + '.');\n      }\n\n      var errors = validators.map(function (v) {\n        return v.apply(undefined, [props, propName, componentName].concat(rest));\n      }).filter(Boolean);\n\n      if (errors.length === validators.length) {\n        return new TypeError(String(componentName) + ': invalid value ' + String(errors) + ' supplied to required ' + String(propName) + '.');\n      }\n\n      return null;\n    }\n\n    return oneOfTypeRequired;\n  }();\n\n  return (0, _wrapValidator2['default'])(validator, 'oneOfType', validators);\n}\n\nfunction or(validators) {\n  var name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'or';\n\n  if (!Array.isArray(validators)) {\n    throw new TypeError('or: 2 or more validators are required');\n  }\n\n  if (validators.length <= 1) {\n    throw new RangeError('or: 2 or more validators are required');\n  }\n\n  var validator = oneOfTypeValidator([(0, _propTypes.arrayOf)(oneOfTypeValidator(validators))].concat(_toConsumableArray(validators)));\n  return (0, _wrapValidator2['default'])(validator, name, validators);\n}","map":null,"metadata":{},"sourceType":"script"}