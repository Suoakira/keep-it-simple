{"ast":null,"code":"Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n\nexports['default'] = childrenHavePropXorChildren;\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _wrapValidator = require('./helpers/wrapValidator');\n\nvar _wrapValidator2 = _interopRequireDefault(_wrapValidator);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    'default': obj\n  };\n}\n\nfunction childrenHavePropXorChildren(prop) {\n  if (typeof prop !== 'string' && (typeof prop === 'undefined' ? 'undefined' : _typeof(prop)) !== 'symbol') {\n    throw new TypeError('invalid prop: must be string or symbol');\n  }\n\n  var validator = function () {\n    function childrenHavePropXorChildrenWithProp(_ref, _, componentName) {\n      var children = _ref.children;\n      var truthyChildrenCount = 0;\n      var propCount = 0;\n      var grandchildrenCount = 0;\n\n      _react2['default'].Children.forEach(children, function (child) {\n        if (!child) {\n          return;\n        }\n\n        truthyChildrenCount += 1;\n\n        if (child.props[prop]) {\n          propCount += 1;\n        }\n\n        if (_react2['default'].Children.count(child.props.children)) {\n          grandchildrenCount += 1;\n        }\n      });\n\n      if (propCount === truthyChildrenCount && grandchildrenCount === 0 || propCount === 0 && grandchildrenCount === truthyChildrenCount || propCount === 0 && grandchildrenCount === 0) {\n        return null;\n      }\n\n      return new TypeError('`' + String(componentName) + \"` requires children to all have prop \\u201C\" + String(prop) + \"\\u201D, all have children, or all have neither.\");\n    }\n\n    return childrenHavePropXorChildrenWithProp;\n  }();\n\n  validator.isRequired = validator;\n  return (0, _wrapValidator2['default'])(validator, 'childrenHavePropXorChildrenWithProp:' + String(prop), prop);\n}","map":null,"metadata":{},"sourceType":"script"}