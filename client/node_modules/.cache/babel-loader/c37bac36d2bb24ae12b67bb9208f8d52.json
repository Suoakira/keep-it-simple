{"ast":null,"code":"Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _arrayPrototype = require('array.prototype.find');\n\nvar _arrayPrototype2 = _interopRequireDefault(_arrayPrototype);\n\nvar _getComponentName = require('./helpers/getComponentName');\n\nvar _getComponentName2 = _interopRequireDefault(_getComponentName);\n\nvar _renderableChildren = require('./helpers/renderableChildren');\n\nvar _renderableChildren2 = _interopRequireDefault(_renderableChildren);\n\nvar _wrapValidator = require('./helpers/wrapValidator');\n\nvar _wrapValidator2 = _interopRequireDefault(_wrapValidator);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    'default': obj\n  };\n}\n\nfunction onlyTypes(types, children, componentName) {\n  if (!children.every(function (child) {\n    return child && (0, _arrayPrototype2['default'])(types, function (Type) {\n      return Type === '*' || child.type === Type;\n    });\n  })) {\n    var typeNames = types.map(_getComponentName2['default']).join(', or ');\n    return new TypeError('`' + String(componentName) + '` only accepts children of type ' + String(typeNames));\n  }\n\n  return null;\n}\n\nfunction isRequired(types, children, componentName) {\n  if (children.length === 0) {\n    var typeNames = types.map(_getComponentName2['default']).join(', or ');\n    return new TypeError('`' + String(componentName) + '` requires at least one node of type ' + String(typeNames));\n  }\n\n  return null;\n}\n\nfunction childrenOfType() {\n  for (var _len = arguments.length, types = Array(_len), _key = 0; _key < _len; _key++) {\n    types[_key] = arguments[_key];\n  }\n\n  if (types.length < 1) {\n    throw new TypeError('childrenOfType: at least 1 type is required');\n  }\n\n  function validator(props, propName, componentName) {\n    return onlyTypes(types, (0, _renderableChildren2['default'])(props[propName]), componentName);\n  }\n\n  validator.isRequired = function (props, propName, componentName) {\n    var children = (0, _renderableChildren2['default'])(props[propName]);\n    return isRequired(types, children, componentName) || onlyTypes(types, children, componentName);\n  };\n\n  return (0, _wrapValidator2['default'])(validator, 'childrenOfType', types);\n}\n\nexports['default'] = childrenOfType;","map":null,"metadata":{},"sourceType":"script"}