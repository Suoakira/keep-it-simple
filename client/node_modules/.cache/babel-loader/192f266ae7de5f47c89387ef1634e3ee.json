{"ast":null,"code":"Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports['default'] = sequenceOfValidator;\n\nvar _object = require('object.assign');\n\nvar _object2 = _interopRequireDefault(_object);\n\nvar _propTypes = require('prop-types');\n\nvar _and = require('./and');\n\nvar _and2 = _interopRequireDefault(_and);\n\nvar _between = require('./between');\n\nvar _between2 = _interopRequireDefault(_between);\n\nvar _nonNegativeInteger = require('./nonNegativeInteger');\n\nvar _nonNegativeInteger2 = _interopRequireDefault(_nonNegativeInteger);\n\nvar _object3 = require('./object');\n\nvar _object4 = _interopRequireDefault(_object3);\n\nvar _withShape = require('./withShape');\n\nvar _withShape2 = _interopRequireDefault(_withShape);\n\nvar _typeOf = require('./helpers/typeOf');\n\nvar _typeOf2 = _interopRequireDefault(_typeOf);\n\nvar _wrapValidator = require('./helpers/wrapValidator');\n\nvar _wrapValidator2 = _interopRequireDefault(_wrapValidator);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    'default': obj\n  };\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar minValidator = _nonNegativeInteger2['default'];\nvar maxValidator = (0, _and2['default'])([_nonNegativeInteger2['default'], (0, _between2['default'])({\n  gte: 1\n})]);\n\nfunction validateRange(min, max) {\n  if (typeof max !== 'number' || typeof min !== 'number') {\n    return null; // no additional checking needed unless both are present\n  }\n\n  if (min <= max) {\n    return null;\n  }\n\n  return new RangeError('min must be less than or equal to max');\n}\n\nvar specifierShape = {\n  validator: function () {\n    function validator(props, propName) {\n      var propValue = props[propName];\n\n      if (typeof propValue !== 'function') {\n        return new TypeError('\"validator\" must be a propType validator function');\n      }\n\n      return null;\n    }\n\n    return validator;\n  }(),\n  min: function () {\n    function min(props, propName) {\n      return minValidator(props, propName) || validateRange(props.min, props.max);\n    }\n\n    return min;\n  }(),\n  max: function () {\n    function max(props, propName) {\n      return maxValidator(props, propName) || validateRange(props.min, props.max);\n    }\n\n    return max;\n  }()\n};\n\nfunction getMinMax(_ref) {\n  var min = _ref.min,\n      max = _ref.max;\n  var minimum = void 0;\n  var maximum = void 0;\n\n  if (typeof min !== 'number' && typeof max !== 'number') {\n    // neither provided, default to \"1\"\n    minimum = 1;\n    maximum = 1;\n  } else {\n    minimum = typeof min === 'number' ? min : 1;\n    maximum = typeof max === 'number' ? max : Infinity;\n  }\n\n  return {\n    minimum: minimum,\n    maximum: maximum\n  };\n}\n\nfunction chunkByType(items) {\n  var chunk = [];\n  var lastType = void 0;\n  return items.reduce(function (chunks, item) {\n    var itemType = (0, _typeOf2['default'])(item);\n\n    if (!lastType || itemType === lastType) {\n      chunk.push(item);\n    } else {\n      chunks.push(chunk);\n      chunk = [item];\n    }\n\n    lastType = itemType;\n    return chunks;\n  }, []).concat(chunk.length > 0 ? [chunk] : []);\n}\n\nfunction validateChunks(specifiers, props, propName, componentName) {\n  var items = props[propName];\n  var chunks = chunkByType(items);\n\n  for (var _len = arguments.length, rest = Array(_len > 4 ? _len - 4 : 0), _key = 4; _key < _len; _key++) {\n    rest[_key - 4] = arguments[_key];\n  }\n\n  for (var i = 0; i < specifiers.length; i += 1) {\n    var _specifiers$i = specifiers[i],\n        validator = _specifiers$i.validator,\n        min = _specifiers$i.min,\n        max = _specifiers$i.max;\n\n    var _getMinMax = getMinMax({\n      min: min,\n      max: max\n    }),\n        minimum = _getMinMax.minimum,\n        maximum = _getMinMax.maximum;\n\n    if (chunks.length === 0 && minimum === 0) {\n      // no chunks left, but this specifier does not require any items\n      continue; // eslint-disable-line no-continue\n    }\n\n    var arrayOfValidator = (0, _propTypes.arrayOf)(validator).isRequired;\n    var chunk = chunks.shift(); // extract the next chunk to test\n\n    var chunkError = arrayOfValidator.apply(undefined, [(0, _object2['default'])({}, props, _defineProperty({}, propName, chunk)), propName, componentName].concat(rest));\n\n    if (chunkError) {\n      // this chunk is invalid\n      if (minimum === 0) {\n        // but, specifier has a min of 0 and can be skipped\n        chunks.unshift(chunk); // put the chunk back, for the next iteration\n\n        continue; // eslint-disable-line no-continue\n      }\n\n      return chunkError;\n    } // chunk is valid!\n\n\n    if (chunk.length < minimum) {\n      return new RangeError(String(componentName) + ': specifier index ' + i + ' requires a minimum of ' + String(min) + ' items, but only has ' + String(chunk.length) + '.');\n    }\n\n    if (chunk.length > maximum) {\n      return new RangeError(String(componentName) + ': specifier index ' + i + ' requires a maximum of ' + String(max) + ' items, but has ' + String(chunk.length) + '.');\n    }\n  }\n\n  if (chunks.length > 0) {\n    return new TypeError(String(componentName) + ': after all ' + String(specifiers.length) + ' specifiers matched, ' + String(chunks.length) + ' types of items were remaining.');\n  }\n\n  return null;\n}\n\nvar specifierValidator = (0, _withShape2['default'])((0, _object4['default'])(), specifierShape).isRequired;\n\nfunction sequenceOfValidator() {\n  for (var _len2 = arguments.length, specifiers = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n    specifiers[_key2] = arguments[_key2];\n  }\n\n  if (specifiers.length === 0) {\n    throw new RangeError('sequenceOf: at least one specifier is required');\n  }\n\n  var errors = specifiers.map(function (specifier, i) {\n    return specifierValidator({\n      specifier: specifier\n    }, 'specifier', 'sequenceOf specifier', 'suequenceOf specifier, index ' + String(i), 'specifier, index ' + String(i));\n  });\n\n  if (errors.some(Boolean)) {\n    throw new TypeError('\\n      sequenceOf: all specifiers must match the appropriate shape.\\n\\n      Errors:\\n        ' + String(errors.map(function (e, i) {\n      return ' - Argument index ' + String(i) + ': ' + String(e.message);\n    }).join(',\\n        ')) + '\\n    ');\n  }\n\n  var validator = function () {\n    function sequenceOf(props, propName) {\n      var propValue = props[propName];\n\n      if (propValue == null) {\n        return null;\n      }\n\n      for (var _len3 = arguments.length, rest = Array(_len3 > 2 ? _len3 - 2 : 0), _key3 = 2; _key3 < _len3; _key3++) {\n        rest[_key3 - 2] = arguments[_key3];\n      }\n\n      var error = _propTypes.array.apply(undefined, [props, propName].concat(rest));\n\n      if (error) {\n        return error;\n      }\n\n      return validateChunks.apply(undefined, [specifiers, props, propName].concat(rest));\n    }\n\n    return sequenceOf;\n  }();\n\n  validator.isRequired = function () {\n    function sequenceOfRequired(props, propName, componentName) {\n      for (var _len4 = arguments.length, rest = Array(_len4 > 3 ? _len4 - 3 : 0), _key4 = 3; _key4 < _len4; _key4++) {\n        rest[_key4 - 3] = arguments[_key4];\n      }\n\n      var error = _propTypes.array.isRequired.apply(_propTypes.array, [props, propName, componentName].concat(rest));\n\n      if (error) {\n        return error;\n      }\n\n      return validateChunks.apply(undefined, [specifiers, props, propName, componentName].concat(rest));\n    }\n\n    return sequenceOfRequired;\n  }();\n\n  return (0, _wrapValidator2['default'])(validator, 'sequenceOf', specifiers);\n}","map":null,"metadata":{},"sourceType":"script"}