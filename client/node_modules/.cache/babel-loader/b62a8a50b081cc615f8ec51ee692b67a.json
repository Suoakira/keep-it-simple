{"ast":null,"code":"Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports['default'] = mutuallyExclusiveOfType;\n\nvar _object = require('object.assign');\n\nvar _object2 = _interopRequireDefault(_object);\n\nvar _wrapValidator = require('./helpers/wrapValidator');\n\nvar _wrapValidator2 = _interopRequireDefault(_wrapValidator);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    'default': obj\n  };\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction mutuallyExclusiveOfType(propType) {\n  if (typeof propType !== 'function') {\n    throw new TypeError('a propType is required');\n  }\n\n  for (var _len = arguments.length, exclusiveProps = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    exclusiveProps[_key - 1] = arguments[_key];\n  }\n\n  if (exclusiveProps.length < 1) {\n    throw new TypeError('at least one prop that is mutually exclusive with this propType is required');\n  }\n\n  var propList = exclusiveProps.join(', or ');\n  var map = exclusiveProps.reduce(function (acc, prop) {\n    return (0, _object2['default'])({}, acc, _defineProperty({}, prop, true));\n  }, {});\n\n  var countProps = function countProps(count, prop) {\n    return count + (map[prop] ? 1 : 0);\n  };\n\n  var validator = function () {\n    function mutuallyExclusiveProps(props, propName, componentName) {\n      var exclusivePropCount = Object.keys(props).filter(function (prop) {\n        return props[prop] != null;\n      }).reduce(countProps, 0);\n\n      if (exclusivePropCount > 1) {\n        return new Error('A ' + String(componentName) + ' cannot have more than one of these props: ' + String(propList));\n      }\n\n      for (var _len2 = arguments.length, rest = Array(_len2 > 3 ? _len2 - 3 : 0), _key2 = 3; _key2 < _len2; _key2++) {\n        rest[_key2 - 3] = arguments[_key2];\n      }\n\n      return propType.apply(undefined, [props, propName, componentName].concat(rest));\n    }\n\n    return mutuallyExclusiveProps;\n  }();\n\n  validator.isRequired = function () {\n    function mutuallyExclusivePropsRequired(props, propName, componentName) {\n      var exclusivePropCount = Object.keys(props).filter(function (prop) {\n        return prop === propName || props[prop] != null;\n      }).reduce(countProps, 0);\n\n      if (exclusivePropCount > 1) {\n        return new Error('A ' + String(componentName) + ' cannot have more than one of these props: ' + String(propList));\n      }\n\n      for (var _len3 = arguments.length, rest = Array(_len3 > 3 ? _len3 - 3 : 0), _key3 = 3; _key3 < _len3; _key3++) {\n        rest[_key3 - 3] = arguments[_key3];\n      }\n\n      return propType.apply(undefined, [props, propName, componentName].concat(rest));\n    }\n\n    return mutuallyExclusivePropsRequired;\n  }();\n\n  return (0, _wrapValidator2['default'])(validator, 'mutuallyExclusiveProps:' + String(propList), exclusiveProps);\n}","map":null,"metadata":{},"sourceType":"script"}