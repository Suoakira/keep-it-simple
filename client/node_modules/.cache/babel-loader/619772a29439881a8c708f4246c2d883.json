{"ast":null,"code":"Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports['default'] = uniqueArrayOfTypeValidator;\n\nvar _object = require('object.assign');\n\nvar _object2 = _interopRequireDefault(_object);\n\nvar _propTypes = require('prop-types');\n\nvar _and = require('./and');\n\nvar _and2 = _interopRequireDefault(_and);\n\nvar _uniqueArray = require('./uniqueArray');\n\nvar _uniqueArray2 = _interopRequireDefault(_uniqueArray);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    'default': obj\n  };\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar unique = (0, _uniqueArray2['default'])();\n\nfunction uniqueArrayOfTypeValidator(type) {\n  if (typeof type !== 'function') {\n    throw new TypeError('type must be a validator function');\n  }\n\n  var mapper = null;\n  var name = 'uniqueArrayOfType';\n\n  for (var _len = arguments.length, rest = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    rest[_key - 1] = arguments[_key];\n  }\n\n  if (rest.length === 1) {\n    if (typeof rest[0] === 'function') {\n      mapper = rest[0];\n    } else if (typeof rest[0] === 'string') {\n      name = rest[0];\n    } else {\n      throw new TypeError('single input must either be string or function');\n    }\n  } else if (rest.length === 2) {\n    if (typeof rest[0] === 'function' && typeof rest[1] === 'string') {\n      mapper = rest[0];\n      name = rest[1];\n    } else {\n      throw new TypeError('multiple inputs must be in [function, string] order');\n    }\n  } else if (rest.length > 2) {\n    throw new TypeError('only [], [name], [mapper], and [mapper, name] are valid inputs');\n  }\n\n  function uniqueArrayOfMapped(props, propName) {\n    var propValue = props[propName];\n\n    if (propValue == null) {\n      return null;\n    }\n\n    var values = propValue.map(mapper);\n\n    for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {\n      args[_key2 - 2] = arguments[_key2];\n    }\n\n    return unique.apply(undefined, [(0, _object2['default'])({}, props, _defineProperty({}, propName, values)), propName].concat(args));\n  }\n\n  uniqueArrayOfMapped.isRequired = function () {\n    function isRequired(props, propName) {\n      var propValue = props[propName];\n\n      for (var _len3 = arguments.length, args = Array(_len3 > 2 ? _len3 - 2 : 0), _key3 = 2; _key3 < _len3; _key3++) {\n        args[_key3 - 2] = arguments[_key3];\n      }\n\n      if (propValue == null) {\n        return _propTypes.array.isRequired.apply(_propTypes.array, [props, propName].concat(args));\n      }\n\n      return uniqueArrayOfMapped.apply(undefined, [props, propName].concat(args));\n    }\n\n    return isRequired;\n  }();\n\n  var arrayValidator = (0, _propTypes.arrayOf)(type);\n  var uniqueValidator = mapper ? uniqueArrayOfMapped : unique;\n  var validator = (0, _and2['default'])([arrayValidator, uniqueValidator], name);\n  validator.isRequired = (0, _and2['default'])([uniqueValidator.isRequired, arrayValidator.isRequired], String(name) + '.isRequired');\n  return validator;\n}","map":null,"metadata":{},"sourceType":"script"}