{"ast":null,"code":"Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n\nexports['default'] = elementTypeValidator;\n\nvar _propTypes = require('prop-types');\n\nvar _and = require('./and');\n\nvar _and2 = _interopRequireDefault(_and);\n\nvar _getComponentName = require('./helpers/getComponentName');\n\nvar _getComponentName2 = _interopRequireDefault(_getComponentName);\n\nvar _wrapValidator = require('./helpers/wrapValidator');\n\nvar _wrapValidator2 = _interopRequireDefault(_wrapValidator);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    'default': obj\n  };\n}\n\nfunction getTypeName(Type) {\n  if (typeof Type === 'string') {\n    return Type;\n  }\n\n  var type = (0, _getComponentName2['default'])(Type);\n  /* istanbul ignore next */\n  // in environments where functions do not have names\n\n  return type || 'Anonymous Component';\n}\n\nfunction validateElementType(Type, props, propName, componentName) {\n  var type = props[propName].type;\n\n  if (type === Type) {\n    return null;\n  }\n\n  return new TypeError(String(componentName) + '.' + String(propName) + ' must be a React element of type ' + String(getTypeName(Type)));\n}\n\nfunction elementTypeValidator(Type) {\n  if (Type === '*') {\n    return (0, _wrapValidator2['default'])(_propTypes.element, 'elementType(*)', Type);\n  }\n\n  if (typeof Type !== 'string' && typeof Type !== 'function') {\n    throw new TypeError('Type must be a React Component, an HTML element tag name, or \"*\". Got an ' + (typeof Type === 'undefined' ? 'undefined' : _typeof(Type)));\n  }\n\n  function elementType(props, propName, componentName) {\n    if (props[propName] == null) {\n      return null;\n    }\n\n    for (var _len = arguments.length, rest = Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {\n      rest[_key - 3] = arguments[_key];\n    }\n\n    return validateElementType.apply(undefined, [Type, props, propName, componentName].concat(rest));\n  }\n\n  elementType.isRequired = elementType; // covered by and + element\n\n  var typeName = getTypeName(Type);\n  var validatorName = 'elementType(' + String(typeName) + ')';\n  return (0, _wrapValidator2['default'])((0, _and2['default'])([_propTypes.element, elementType], validatorName), validatorName, Type);\n}","map":null,"metadata":{},"sourceType":"script"}