{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _reactDom = _interopRequireDefault(require(\"react-dom\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _semanticUiReact = require(\"semantic-ui-react\");\n\nvar _lib = require(\"../lib\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar popupStyle = {\n  padding: '0',\n  filter: 'none' // prevents bluring popup when used inside Modal with dimmer=\"bluring\" #28 #26\n\n};\n\nvar FormInputWithRef =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(FormInputWithRef, _React$Component);\n\n  function FormInputWithRef() {\n    _classCallCheck(this, FormInputWithRef);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(FormInputWithRef).apply(this, arguments));\n  }\n\n  _createClass(FormInputWithRef, [{\n    key: \"render\",\n    value: function render() {\n      return _react.default.createElement(_semanticUiReact.Form.Input, this.props);\n    }\n  }]);\n\n  return FormInputWithRef;\n}(_react.default.Component);\n\n_defineProperty(FormInputWithRef, \"handledProps\", []);\n\nvar InputView =\n/*#__PURE__*/\nfunction (_React$Component2) {\n  _inherits(InputView, _React$Component2);\n\n  function InputView() {\n    _classCallCheck(this, InputView);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(InputView).apply(this, arguments));\n  }\n\n  _createClass(InputView, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.props.onMount && this.props.onMount(this.inputNode);\n      this.initialInputNode = this.inputNode;\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      // TODO: find actual root of the problem.\n      // Sometimes input node reference passed\n      // to this.props.onMount stales.\n      // this.inputNode referes to \n      // different DOM object than it was after first\n      // component render.\n      // InputView component doesn't unmount it just\n      // gets different underlying input node.\n      // In order to keep input node reference fresh\n      // we make this check.\n      if (this.inputNode !== this.initialInputNode) {\n        this.initialInputNode = this.inputNode;\n        this.props.onMount(this.inputNode);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this = this;\n\n      var _this$props = this.props,\n          popupPosition = _this$props.popupPosition,\n          inline = _this$props.inline,\n          value = _this$props.value,\n          closeOnMouseLeave = _this$props.closeOnMouseLeave,\n          onChange = _this$props.onChange,\n          inlineLabel = _this$props.inlineLabel,\n          popupIsClosed = _this$props.popupIsClosed,\n          mountNode = _this$props.mountNode,\n          tabIndex = _this$props.tabIndex;\n      var rest = (0, _lib.getUnhandledProps)(InputView, this.props);\n\n      var inputElement = _react.default.createElement(FormInputWithRef, _extends({}, rest, {\n        ref: function ref(e) {\n          var node = _reactDom.default.findDOMNode(e);\n\n          _this.inputNode = node && node.querySelector('input');\n        },\n        value: value,\n        tabIndex: tabIndex,\n        inline: inlineLabel,\n        onChange: onChange\n      }));\n\n      if (inline) return this.props.render({\n        tabIndex: tabIndex\n      });\n      return _react.default.createElement(_semanticUiReact.Popup, {\n        position: popupPosition,\n        open: popupIsClosed ? false : undefined,\n        trigger: inputElement,\n        hoverable: closeOnMouseLeave,\n        flowing: true,\n        mountNode: mountNode,\n        style: popupStyle,\n        hideOnScroll: true,\n        on: \"focus\"\n      }, this.props.render({\n        tabIndex: -1\n      }));\n    }\n  }]);\n\n  return InputView;\n}(_react.default.Component);\n\n_defineProperty(InputView, \"handledProps\", [\"children\", \"closeOnMouseLeave\", \"inline\", \"inlineLabel\", \"mountNode\", \"onChange\", \"onMount\", \"popupIsClosed\", \"popupPosition\", \"render\", \"tabIndex\", \"value\"]);\n\nInputView.propTypes = {\n  render: _propTypes.default.func.isRequired,\n\n  /** Whether to display inline picker or picker inside a popup. */\n  inline: _propTypes.default.bool,\n\n  /** Where to display popup. */\n  popupPosition: _propTypes.default.string,\n\n  /** Currently selected value. */\n  value: _propTypes.default.string,\n\n  /** Whether to close a popup when cursor leaves it. */\n  closeOnMouseLeave: _propTypes.default.bool,\n\n  /** Called after input field value has changed. */\n  onChange: _propTypes.default.func,\n\n  /** Picker. */\n  children: _propTypes.default.node,\n\n  /** A field can have its label next to instead of above it. */\n  inlineLabel: _propTypes.default.bool,\n\n  /** Whether popup is closed. */\n  popupIsClosed: _propTypes.default.bool,\n\n  /** The node where the picker should mount. */\n  mountNode: _propTypes.default.any,\n  tabIndex: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),\n  onMount: _propTypes.default.func\n};\nInputView.defaultProps = {\n  inline: false,\n  closeOnMouseLeave: true,\n  tabIndex: '0'\n};\nvar _default = InputView;\nexports.default = _default;","map":null,"metadata":{},"sourceType":"script"}