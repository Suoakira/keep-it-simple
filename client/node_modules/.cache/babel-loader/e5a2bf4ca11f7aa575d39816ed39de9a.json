{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.buildDays = buildDays;\nexports.getBrakepoints = getBrakepoints;\nexports.getDefaultEnabledDayPositions = getDefaultEnabledDayPositions;\nexports.getDisabledDays = getDisabledDays;\nexports.isNextPageAvailable = isNextPageAvailable;\nexports.isPrevPageAvailable = isPrevPageAvailable;\nexports.getDaysArray = getDaysArray;\n\nvar _lodash = _interopRequireDefault(require(\"lodash\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/** Build days to fill page. */\n\n\nfunction buildDays(date\n/*moment*/\n, daysOnPage\n/*number*/\n) {\n  var start = date.clone().startOf('month').startOf('week');\n  return getDaysArray(start.date(), getBrakepoints(date), daysOnPage).map(function (date) {\n    return date.toString();\n  });\n}\n/** Return dates from ends of months.\n * \n * On one datepicker's page not only days from current month are displayed\n * but also some days from adjacent months. This function returns days\n * that separate one month from other (last day in month).\n * Return array of one or two numbers.\n */\n\n\nfunction getBrakepoints(date\n/*moment*/\n) {\n  var dateClone = date.clone();\n  var currentMonth = dateClone.month();\n  var brakepoints = [];\n  dateClone.startOf('month').startOf('week');\n\n  if (dateClone.month() !== currentMonth) {\n    brakepoints.push(dateClone.endOf('month').date());\n    dateClone.add(1, 'month');\n  }\n\n  brakepoints.push(dateClone.endOf('month').date());\n  return brakepoints;\n}\n/* Return array of day positions that are not disabled by default. */\n\n\nfunction getDefaultEnabledDayPositions(allDays\n/*string[]*/\n, date\n/*moment*/\n) {\n  var dateClone = date.clone();\n  var brakepoints = getBrakepoints(dateClone);\n\n  if (brakepoints.length === 1) {\n    return _lodash.default.range(0, _lodash.default.indexOf(allDays, brakepoints[0].toString()) + 1);\n  } else {\n    return _lodash.default.range(_lodash.default.indexOf(allDays, brakepoints[0].toString()) + 1, _lodash.default.lastIndexOf(allDays, brakepoints[1].toString()) + 1);\n  }\n}\n/** Return day positions that shoud be displayed as disabled. */\n\n\nfunction getDisabledDays(disable, maxDate, minDate, currentDate, daysOnPage, enable) {\n  var dayPositions = _lodash.default.range(daysOnPage);\n\n  var daysInCurrentMonthPositions = getDefaultEnabledDayPositions(buildDays(currentDate, daysOnPage), currentDate);\n  var disabledDays = dayPositions.filter(function (dayPosition) {\n    return !_lodash.default.includes(daysInCurrentMonthPositions, dayPosition);\n  });\n\n  if (_lodash.default.isArray(enable)) {\n    var enabledDaysPositions = enable.filter(function (date) {\n      return date.isSame(currentDate, 'month');\n    }).map(function (date) {\n      return date.date();\n    }).map(function (date) {\n      return daysInCurrentMonthPositions[date - 1];\n    });\n    disabledDays = _lodash.default.concat(disabledDays, dayPositions.filter(function (position) {\n      return !_lodash.default.includes(enabledDaysPositions, position);\n    }));\n  }\n\n  if (_lodash.default.isArray(disable)) {\n    disabledDays = _lodash.default.concat(disabledDays, disable.filter(function (date) {\n      return date.isSame(currentDate, 'month');\n    }).map(function (date) {\n      return date.date();\n    }).map(function (date) {\n      return daysInCurrentMonthPositions[date - 1];\n    }));\n  }\n\n  if (!_lodash.default.isNil(maxDate)) {\n    if (maxDate.isBefore(currentDate, 'month')) {\n      disabledDays = dayPositions;\n    }\n\n    if (maxDate.isSame(currentDate, 'month')) {\n      disabledDays = _lodash.default.concat(disabledDays, _lodash.default.range(1, daysInCurrentMonthPositions.length + 1).filter(function (date) {\n        return date > maxDate.date();\n      }).map(function (date) {\n        return daysInCurrentMonthPositions[date - 1];\n      }));\n    }\n  }\n\n  if (!_lodash.default.isNil(minDate)) {\n    if (minDate.isAfter(currentDate, 'month')) {\n      disabledDays = dayPositions;\n    }\n\n    if (minDate.isSame(currentDate, 'month')) {\n      disabledDays = _lodash.default.concat(disabledDays, _lodash.default.range(1, daysInCurrentMonthPositions.length + 1).filter(function (date) {\n        return date < minDate.date();\n      }).map(function (date) {\n        return daysInCurrentMonthPositions[date - 1];\n      }));\n    }\n  }\n\n  return _lodash.default.sortBy(_lodash.default.uniq(disabledDays).filter(function (day) {\n    return !_lodash.default.isNil(day);\n  }));\n}\n\nfunction isNextPageAvailable(date, maxDate) {\n  if (_lodash.default.isNil(maxDate)) return true;\n  if (date.isSameOrAfter(maxDate, 'month')) return false;\n  return true;\n}\n\nfunction isPrevPageAvailable(date, minDate) {\n  if (_lodash.default.isNil(minDate)) return true;\n  if (date.isSameOrBefore(minDate, 'month')) return false;\n  return true;\n} // helper\n\n\nfunction getDaysArray(start\n/*number*/\n, brakepoints\n/*number[]*/\n, length) {\n  var currentDay = start;\n  var days = [];\n  var brakepointsLeft = brakepoints.slice();\n\n  while (!(days.length === length)) {\n    days.push(currentDay);\n\n    var bp = _lodash.default.first(brakepointsLeft);\n\n    if (currentDay === bp) {\n      currentDay = 1;\n      brakepointsLeft = _lodash.default.slice(brakepointsLeft, 1);\n    } else {\n      currentDay = currentDay + 1;\n    }\n  }\n\n  return days;\n}","map":null,"metadata":{},"sourceType":"script"}